// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package fcm is a generated GoMock package.
package fcm

import (
	context "context"
	reflect "reflect"

	messaging "firebase.google.com/go/v4/messaging"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockClient) Send(ctx context.Context, message *messaging.Message) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, message)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockClientMockRecorder) Send(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockClient)(nil).Send), ctx, message)
}

// SendAll mocks base method.
func (m *MockClient) SendAll(ctx context.Context, messages []*messaging.Message) (*messaging.BatchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAll", ctx, messages)
	ret0, _ := ret[0].(*messaging.BatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendAll indicates an expected call of SendAll.
func (mr *MockClientMockRecorder) SendAll(ctx, messages interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAll", reflect.TypeOf((*MockClient)(nil).SendAll), ctx, messages)
}

// SendAllDryRun mocks base method.
func (m *MockClient) SendAllDryRun(ctx context.Context, messages []*messaging.Message) (*messaging.BatchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAllDryRun", ctx, messages)
	ret0, _ := ret[0].(*messaging.BatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendAllDryRun indicates an expected call of SendAllDryRun.
func (mr *MockClientMockRecorder) SendAllDryRun(ctx, messages interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAllDryRun", reflect.TypeOf((*MockClient)(nil).SendAllDryRun), ctx, messages)
}

// SendDryRun mocks base method.
func (m *MockClient) SendDryRun(ctx context.Context, message *messaging.Message) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDryRun", ctx, message)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendDryRun indicates an expected call of SendDryRun.
func (mr *MockClientMockRecorder) SendDryRun(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDryRun", reflect.TypeOf((*MockClient)(nil).SendDryRun), ctx, message)
}

// SendMulticast mocks base method.
func (m *MockClient) SendMulticast(ctx context.Context, message *messaging.MulticastMessage) (*messaging.BatchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMulticast", ctx, message)
	ret0, _ := ret[0].(*messaging.BatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMulticast indicates an expected call of SendMulticast.
func (mr *MockClientMockRecorder) SendMulticast(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMulticast", reflect.TypeOf((*MockClient)(nil).SendMulticast), ctx, message)
}

// SendMulticastDryRun mocks base method.
func (m *MockClient) SendMulticastDryRun(ctx context.Context, message *messaging.MulticastMessage) (*messaging.BatchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMulticastDryRun", ctx, message)
	ret0, _ := ret[0].(*messaging.BatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMulticastDryRun indicates an expected call of SendMulticastDryRun.
func (mr *MockClientMockRecorder) SendMulticastDryRun(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMulticastDryRun", reflect.TypeOf((*MockClient)(nil).SendMulticastDryRun), ctx, message)
}

// SubscribeToTopic mocks base method.
func (m *MockClient) SubscribeToTopic(ctx context.Context, tokens []string, topic string) (*messaging.TopicManagementResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToTopic", ctx, tokens, topic)
	ret0, _ := ret[0].(*messaging.TopicManagementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeToTopic indicates an expected call of SubscribeToTopic.
func (mr *MockClientMockRecorder) SubscribeToTopic(ctx, tokens, topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToTopic", reflect.TypeOf((*MockClient)(nil).SubscribeToTopic), ctx, tokens, topic)
}

// UnsubscribeFromTopic mocks base method.
func (m *MockClient) UnsubscribeFromTopic(ctx context.Context, tokens []string, topic string) (*messaging.TopicManagementResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnsubscribeFromTopic", ctx, tokens, topic)
	ret0, _ := ret[0].(*messaging.TopicManagementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnsubscribeFromTopic indicates an expected call of UnsubscribeFromTopic.
func (mr *MockClientMockRecorder) UnsubscribeFromTopic(ctx, tokens, topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsubscribeFromTopic", reflect.TypeOf((*MockClient)(nil).UnsubscribeFromTopic), ctx, tokens, topic)
}
